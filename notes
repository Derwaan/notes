#!/bin/bash

set -e

verbose='false'
recursive='false'
input=$(pwd)
output=$(pwd)

usage() {
cat << EOF
USAGE:

    notes ["all"]

EOF
}

getnotes() {
    ack -n "> Date: " . | \
    while read line; do
        course=$(echo "$line" | sed 's/\([^ ]*\) .*/\1/')
        file=$(echo "$line" | sed 's/\([^:]*\):2:>.*$/\1/')
        date=$(echo "$line" | sed 's/[^:]*:2:> Date: \(.*$\)/\1/')
        echo "$course$date $file"
    done|\
    sort -n|\
    while read line; do
        file=$(echo "$line" | sed 's/[^ ]* \(.*\)/\1/')
        echo "$file"
    done
    unset course file date
}


makepdf() {
    pandoc -s -S --normalize -o "${1}.pdf" $2
    if [ "$verbose" == 'true' ]; then
        echo "${1}.pdf created"
    fi
}

main() {
    for each in $1/*; do
        if ls $each/*.md &> /dev/null; then
            cd "$each"
            notes=$(getnotes)

            if [ "$notes" != "" ]; then
                output_file="$output/"$(basename "$each")
                oldifs=$IFS
                IFS=$'\n'
                makepdf "$output_file" "$notes"
                IFS=$oldifs

            fi
            unset notes output_file oldifs
        elif [ -e $each ]; then
            main "$each"
        fi
    done
}

while getopts "hvo:i:r" flag; do
    case "${flag}" in
        h) usage; exit 0 ;;
        v) verbose='true'; break ;;
        r) recursive='true'; break ;;
        o) output=$(readlink -f "${OPTARG}"); break ;;
        i) input=$(readlink -f "${OPTARG}"); break ;;
        *) echo "Unexpected option ${flag}"; exit 0 ;;
    esac
done
main "$input"
